{{>licenseInfo}}
package {{apiPackage}}

import org.openapitools.client.*
import io.ktor.client.*
import io.ktor.client.request.*
import io.ktor.http.*
import kotlinx.coroutines.*
import kotlinx.serialization.json.JSON

{{#imports}}import {{import}}
{{/imports}}

{{#threetenbp}}
import org.threeten.bp.LocalDateTime
{{/threetenbp}}

{{#operations}}
class {{classname}} {
    private val client = HttpClient()
    var address = Url("http://matt.croptracker.local")

    {{#operation}}
    /**
     * {{summary}}
     * {{notes}}
     {{#allParams}}* @param {{paramName}} {{description}} {{^required}}(optional{{#defaultValue}}, default to {{{.}}}{{/defaultValue}}){{/required}}
     {{/allParams}}* @return {{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}void{{/returnType}}
     */

    fun {{operationId}}({{#allParams}}{{paramName}}: {{{dataType}}}, {{/allParams}} callback: ({{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}Unit{{/returnType}}) -> Unit) {

        // val localVariableBody: kotlin.Any? = {{#hasBodyParam}}{{#bodyParams}}{{paramName}}{{/bodyParams}}{{/hasBodyParam}}{{^hasBodyParam}}{{^hasFormParams}}null{{/hasFormParams}}{{#hasFormParams}}mapOf({{#formParams}}"{{{baseName}}}" to "${{paramName}}"{{#hasMore}}, {{/hasMore}}{{/formParams}}){{/hasFormParams}}{{/hasBodyParam}}
        // val localVariableQuery: MultiValueMap = {{^hasQueryParams}}mapOf(){{/hasQueryParams}}{{#hasQueryParams}}mapOf({{#queryParams}}"{{baseName}}" to {{#isContainer}}toMultiValue({{paramName}}.toList(), "{{collectionFormat}}"){{/isContainer}}{{^isContainer}}listOf("${{paramName}}"){{/isContainer}}{{#hasMore}}, {{/hasMore}}{{/queryParams}}){{/hasQueryParams}}
        // val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf({{#hasFormParams}}"Content-Type" to "multipart/form-data"{{/hasFormParams}}{{^hasHeaderParams}}){{/hasHeaderParams}}{{#hasHeaderParams}}{{#hasFormParams}}, {{/hasFormParams}}{{#headerParams}}"{{baseName}}" to {{#isContainer}}{{paramName}}.joinToString(separator = collectionDelimiter("{{collectionFormat}}"){{/isContainer}}{{^isContainer}}{{paramName}}{{/isContainer}}{{#hasMore}}, {{/hasMore}}{{/headerParams}}){{/hasHeaderParams}}
        
        //val localVariableConfig = RequestConfig(
        //    RequestMethod.{{httpMethod}},
        //    "{{path}}"{{#pathParams}}.replace("{"+"{{baseName}}"+"}", "${{paramName}}"){{/pathParams}},
        //    query = localVariableQuery,
        //    headers = localVariableHeaders
        // )

        // val jsonPostData = JSON.unquoted.stringify(InDataTypeSerializer, paramObj)

        val requestPath = this@{{classname}}.address.toString() + "{{path}}"{{#pathParams}}.replace("{"+"{{baseName}}"+"}", "${{paramName}}"){{/pathParams}}

        GlobalScope.apply {
            launch(ApplicationDispatcher) {
                val result: String = client.get {
                    url(requestPath)
                }

                {{#returnType}}
                var resultObj = JSON.parse({{{returnType}}}.{{returnType}}Serializer, result)

                callback(resultObj)
                {{/returnType}}

                {{^returnType}}
                callback(Kotlin.Unit())
                {{/returnType}}
            }
        }
    }
    {{/operation}}
}
{{/operations}}

